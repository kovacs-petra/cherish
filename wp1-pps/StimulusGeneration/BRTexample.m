function params = BRTexample(amtPath, savePath)
% Usage: params = BRTexample(amtPath, savePath)
%
% Example script to replicate BRT bug. 10 triangle wave signals are created
% and spatialized in BRT to move from right to left at 1 m distance.
%
% Inputs:
% amtPath   - Path for Auditory Modeling Toolbox
% savePath  - Directory to save data into
%
% Outputs:
% params    - .mat file containing the stimuli and their parameters
% 
% Required:
% - AMT toolbox
% - oscsend.m
% - BRTspat.m (custom script to control BRT from Matlab)
% - PsychToolbox for timing precision
%
% #Author: Petra Kovacs

nStimuli = 10; % generate 10 stimuli 

% Initialize output
paramFields = {
    'stimNo', ...     % Stimulus number
    'f0', ...         % F0 in Hz
    'dur', ...        % Duration in s
    'fs', ...         % Sampling rate
    'sigSpat', ...    % The spatialized signal
    'sofa'            % SOFA file generated by BRT
    };

params = cell(nStimuli+1,length(paramFields));
params(1,:) = paramFields;

% Initialize Auditory Modeling Toolbox
if ~exist("amt_start.m","file")
    addpath(amtPath);
    amt_start;
end

% Default sampling rate in BRT
fs = 48e3;

% F0 values
fmin = 310;
fmax = 2*fmin; % 1 octave
f0_options = round(linspace(fmin,fmax,10),-1); % 10 unique f0 values

% Duration (s)
dur = 5;
updateRate = 2/1000; % update position every 2 ms during recording

% Spatial position (trajectory)
d = 1; % distance in m
azi = linspace(-90,90,round(dur/updateRate)); % right to left
ele = linspace(0,0,round(dur/updateRate));
r = linspace(d,d,round(dur/updateRate));

% Set connection between Matlab and BRT through OSC; set some settings
u = pnet('udpsocket',10017); % Listen port in BRT
oscsend(u, '/control/connect', 'si', 'localhost',10019);
oscsend(u, '/listener/enableSpatialization', 'sB', 'DefaultListener',1);
oscsend(u, '/listener/enableInterpolation', 'sB', 'DefaultListener',1);
oscsend(u, '/listener/enableNearFieldEffect', 'sB', 'DefaultListener',1);
oscsend(u, '/listener/enableITD', 'sB', 'DefaultListener',1);
oscsend(u, '/environment/enableModel', 'sB', 'FreeField',1);
oscsend(u, '/environment/enableDirectPath', 'sB', 'FreeField',1);
oscsend(u, '/environment/enableReverbPath', 'sB', 'FreeField',1);
oscsend(u, '/listener/enableParallaxCorrection', 'sB', 'DefaultListener',1);
oscsend(u, '/listener/enableModel', 'sB', 'DirectPath', 1);
oscsend(u, '/listener/enableModel', 'sB', 'ReverbPath', 1);
oscsend(u, '/environment/enablePropagationDelay', 'sB', 'FreeField', 1);
oscsend(u, '/environment/enableDistanceAttenuation', 'sB', 'FreeField', 1);

% Generate 10 stimuli
for stimulus = 1:nStimuli
    % Progress update
    clc; disp(['Processing stimulus ',num2str(stimulus),'/10...']);

    % Vary the f0
    f0 = f0_options(stimulus);

    % Make triangle wave
    t = linspace(0,dur,dur*fs);
    sig = sawtooth(2 * pi * f0 * t, 0.5);

    % Save as wav for BRT input
    wavname = strcat(savePath,'\sample',num2str(stimulus),'.wav');
    audiowrite(wavname, sig, fs); 
    matname = strcat(savepath,'\sample',num2str(stimulus),'.mat');

    % Spatialize with BRT
    [sigSpat, sigParams] = BRTspat(wavname,dur,azi,ele,r,matname,updateRate,u);

    % Add on-offset ramp to the spatialized stimulus
    win = tukeywin(size(sigSpat,2),(0.1*fs)/size(sigSpat,2)); % 0.1 s ramp
    sigSpatWin = sigSpat.*repmat(win',2,1);

    % Scale to 1 to avoid clipping
    scaledb = 20 * log10(1 / max(sigSpatWin,[],"all"));
    scalesig1 = scaletodbspl(sigSpatWin(1,:)',dbspl(sigSpatWin(1,:)')+scaledb);
    scalesig2 = scaletodbspl(sigSpatWin(2,:)',dbspl(sigSpatWin(2,:)')+scaledb);
    scalesig = [scalesig1 scalesig2];

    % Save into output array
    params(stimulus+1,:) = {stimulus,f0,dur,fs,scalesig,sigParams.sofa};

    % Give BRT some time to recuperate
    WaitSecs(3); 
end

% Save output
save(strcat(savepath,'\params.mat'), 'params');

